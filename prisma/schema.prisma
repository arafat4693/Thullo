// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?     @unique
    hashedPassword String?
    emailVerified  DateTime?
    image          String?
    imageID        String?
    accounts       Account[]
    sessions       Session[]
    boardIDs       String[]    @db.ObjectId
    boardsMember   Board[]     @relation("member", fields: [boardIDs], references: [id])
    userBoards     Board[]     @relation("owner")
    BoardCard      BoardCard[] @relation("assigned", fields: [boardCardId], references: [id])
    boardCardId    String[]    @db.ObjectId
    Comment        Comment[]
    createdCards   BoardCard[] @relation("Card Creator")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    cover       String
    coverID     String
    description String?
    title       String
    visibility  Visibility @default(PUBLIC)
    createdAt   DateTime   @default(now())

    user       User        @relation("owner", fields: [userId], references: [id])
    userId     String      @db.ObjectId
    memberIDs  String[]    @db.ObjectId
    members    User[]      @relation("member", fields: [memberIDs], references: [id])
    boardLists BoardList[]
}

model BoardList {
    id      String      @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    cards   BoardCard[]
    Board   Board?      @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId String?     @db.ObjectId
}

model BoardCard {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    BoardList       BoardList?   @relation(fields: [boardListId], references: [id], onDelete: Cascade)
    boardListId     String?      @db.ObjectId
    title           String
    assignedIDs     String[]     @db.ObjectId
    assignedMembers User[]       @relation("assigned", fields: [assignedIDs], references: [id])
    description     String?
    cover           String?
    coverID         String?
    Comments        Comment[]
    Labels          Label[]
    Attachments     Attachment[]
    creator         User         @relation("Card Creator", fields: [creatorId], references: [id])
    creatorId       String       @db.ObjectId
}

model Comment {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    content     String
    user        User      @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    boardCard   BoardCard @relation(fields: [boardCardId], references: [id])
    boardCardId String    @db.ObjectId
    createdAt   DateTime  @default(now())
}

model Label {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    labelColor  String
    boardCard   BoardCard @relation(fields: [boardCardId], references: [id])
    boardCardId String    @db.ObjectId
}

model Attachment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    cover     String
    coverID   String
    createdAt DateTime @default(now())

    boardCard   BoardCard @relation(fields: [boardCardId], references: [id])
    boardCardId String    @db.ObjectId
}

enum Visibility {
    PUBLIC
    PRIVATE
}
